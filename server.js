// Generated by CoffeeScript 1.7.1
var LocalStrategy, Point, Point_Schema, Stream, Stream_Schema, User, User_Schema, app, bcrypt, db, express, http, httpServer, io, mongoose, passport, salt, secrets, socket;

socket = require('socket.io');

express = require('express');

LocalStrategy = require('passport-local').Strategy;

bcrypt = require('bcrypt');

secrets = require('./secrets.json');

http = require('http');

passport = require('passport');

mongoose = require('mongoose');

LocalStrategy = require('passport-local').Strategy;

salt = bcrypt.genSaltSync(10);

mongoose.connect(secrets.mongoURL);

db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

db.once('open', function() {});

User_Schema = mongoose.Schema({
  name: String,
  description: String,
  url: String,
  owner: String,
  code: String
});

User = mongoose.model('User', User_Schema);

Stream_Schema = mongoose.Schema({
  name: String,
  description: String,
  url: String,
  owner: String,
  code: String
});

Stream = mongoose.model('Stream', Stream_Schema);

Point_Schema = mongoose.Schema({
  name: String,
  description: String,
  url: String,
  owner: String,
  code: String
});

Point = mongoose.model('Point', Point_Schema);

passport.serializeUser(function(user, done) {
  return done(null, user._id);
});

passport.deserializeUser(function(obj, done) {
  return User.findOne({
    _id: obj
  }, function(err, person) {
    return done(err, person);
  });
});

passport.use(new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password'
}, function(email, password, done) {

  /*
  User.find { email: email}, 
    (err, people) ->
      console.log(people)
      done err if err?
      once = true
      for person in people
        console.log([arguments, person])
        if bcrypt.compareSync(password, person.password) and once
          done(null, people[0])
          once = false
      if once
        done(null)
   */
}));

app = express();

app.set('views', __dirname + '/views');

app.set('view engine', 'ejs');

app.use(express.cookieParser());

app.use(express.bodyParser());

app.use(express.errorHandler({
  dumpExceptions: true,
  showStack: true
}));

app.use(express.session({
  secret: 'data fish secret'
}));

app.use(passport.initialize());

app.use(passport.session());

app.use(app.router);

app.use('/js', express["static"](__dirname + '/js'));

app.use('/css', express["static"](__dirname + '/css'));

app.use('/static', express["static"](__dirname + '/public'));

httpServer = http.createServer(app).listen(8081);

io = socket.listen(httpServer);

io.set('log level', 0);

console.log(secrets);

app.get('/', function(req, res) {
  return res.json('Hello, World!');
});

app.get('/user', function(req, res) {});

app.post('/user', function(req, res) {});

app["delete"]('/user', function(req, res) {});

app.get('/stream', function(req, res) {});

app.post('/stream', function(req, res) {});

app["delete"]('/stream', function(req, res) {});

app.get('/point', function(req, res) {});

app.post('/point', function(req, res) {});

app["delete"]('/point', function(req, res) {});
