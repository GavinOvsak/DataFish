// Generated by CoffeeScript 1.7.1
var Client, Client_Schema, LocalStrategy, Point, Point_Schema, Stream, Stream_Schema, User, User_Schema, app, bcrypt, db, express, http, httpServer, io, mongoose, newStream, newUser, passport, publiclyViewableUser, salt, socket;

socket = require('socket.io');

express = require('express');

LocalStrategy = require('passport-local').Strategy;

bcrypt = require('bcrypt');

http = require('http');

passport = require('passport');

mongoose = require('mongoose');

LocalStrategy = require('passport-local').Strategy;

salt = bcrypt.genSaltSync(10);

mongoose.connect("mongodb://nodejitsu:39095eb4b324f0ec29154cc380c012ea@troup.mongohq.com:10060/nodejitsudb4748235279");

db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

db.once('open', function() {
  console.log('Connected to the database!');
  User.find({}, function(err, users) {
    console.log('All users: ');
    return console.log(users);
  });
  return Stream.find({}, function(err, streams) {
    console.log('All streams: ');
    return console.log(streams);
  });
});


/*
ToDo list:
x Get requests for public data
- Make Authentication for Websites
- Make Authentication for Apps
- Make API for new stream, new data, updates
 */

User_Schema = mongoose.Schema({
  name: String,
  email: String,
  password: String,
  level: Number,
  following: Array,
  favorites: Array,
  owner: Array,
  editor: Array,
  picture: String,
  bio: String,
  isVerified: Boolean
});

User = mongoose.model('User', User_Schema);

Client_Schema = mongoose.Schema({
  user_id: String,
  socket: Object
});

Client = mongoose.model('Client', Client_Schema);

Stream_Schema = mongoose.Schema({
  name: String,
  unit: String,
  genre: String,
  description: String,
  points: [],
  website: String,
  picture: String,
  average: Number,
  subscriptions: Array
});

Stream = mongoose.model('Stream', Stream_Schema);

Point_Schema = mongoose.Schema({
  name: Number,
  source: String,
  time: String,
  created: String,
  creator: Number
});

Point = mongoose.model('Point', Point_Schema);

if (false) {
  User.remove({}, function() {});
  newUser = new User({
    name: 'Bob1',
    email: 'test@test.com',
    password: bcrypt.hashSync('password', salt),
    level: 1,
    following: [],
    favorites: [],
    owner: [],
    editor: [],
    picture: '',
    bio: '',
    isVerified: false
  });
  newUser.save(function(err) {
    if (err != null) {
      console.log(err);
    }
    return console.log('Saved');
  });
}


/*
name: String,
  unit: String,
  genre: String,
  description: String,
  points: Number,
  website: String,
  picture: String,
  average: Number,
  subscriptions: Array
 */

if (false) {
  newStream = new Stream({
    name: 'Durham Temp',
    genre: 'Weather',
    description: '',
    points: [],
    website: '',
    picture: '',
    average: 0,
    subscriptions: []
  });
  newStream.save();
  console.log(newStream);
}

passport.serializeUser(function(user, done) {
  return done(null, user._id);
});

passport.deserializeUser(function(obj, done) {
  return User.findOne({
    _id: obj
  }, function(err, person) {
    return done(err, person);
  });
});

passport.use(new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password'
}, function(email, password, done) {
  console.log(arguments);
  return User.findOne({
    email: email
  }, function(err, person) {
    console.log(person);
    if (err != null) {
      done(err);
    }
    if (bcrypt.compareSync(password, person.password)) {
      return done(null, person);
    } else {
      return done(null);
    }
  });
}));

app = express();

app.set('views', __dirname + '/public');

app.set('view engine', 'ejs');

app.use(express.cookieParser());

app.use(express.bodyParser());

app.use(express.errorHandler({
  dumpExceptions: true,
  showStack: true
}));

app.use(express.session({
  secret: 'data fish secret'
}));

app.use(passport.initialize());

app.use(passport.session());

app.engine('html', require('ejs').renderFile);

app.use(app.router);

app.use('/img', express["static"](__dirname + '/img'));

app.use('/font-awesome', express["static"](__dirname + '/font-awesome'));

app.use('/js', express["static"](__dirname + '/js'));

app.use('/css', express["static"](__dirname + '/css'));

app.use('/static', express["static"](__dirname + '/public'));

httpServer = http.createServer(app).listen(8081);

console.log('Server running at http://localhost:8081');

io = socket.listen(httpServer);

io.set('log level', 1);

app.post('/login', passport.authenticate('local'), function(req, res) {
  return res.json(req.user);
});

app.get('/logout', function(req, res) {
  req.logout();
  return res.redirect('/');
});

app.post('/register', function(req, res) {
  if ((req.body.email != null) && (req.body.name != null) && (req.body.password != null)) {
    return User.find({
      email: req.body.email
    }, function(err, users) {
      if (users.length === 0) {
        newUser = new User({
          name: req.body.name,
          email: req.body.email,
          password: bcrypt.hashSync(req.body.password, salt),
          level: 1,
          following: [],
          favorites: [],
          owner: [],
          editor: [],
          picture: '',
          bio: 'I am a new member!',
          isVerified: false
        });
        newUser.save();
        return req.login(newUser, function() {
          return res.json(newUser);
        });
      } else {
        return res.json('Already exists');
      }
    });
  } else {
    return res.json('Not enough info (name, email, password)');
  }
});

app.get('/', function(req, res) {
  return res.render('home');
});

app.get('/getToken', function(req, res) {
  if ((req.query.email != null) && (req.query.password != null)) {
    return User.findOne({
      email: req.query.email
    }, function(err, user) {
      var newClient;
      if (err != null) {
        console.log(err);
      }
      if (user != null) {
        newClient = new Client({
          user_id: user._id
        });
        newClient.save();
        return res.json({
          key: newClient._id
        });
      } else {
        return res.json('no user with that email');
      }
    });
  } else {
    return res.json('Need email and password');
  }
});

publiclyViewableUser = function(user) {
  var publicUser;
  return publicUser = {
    name: user.name,
    email: user.email,
    bio: user.bio,
    level: user.level,
    picture: user.picture,
    isVerified: user.isVerified,
    following: user.following,
    favorites: user.favorites,
    owner: user.owner,
    editor: user.editor
  };
};

io.sockets.on('connection', function(socket) {
  socket.on('listen', function(data) {
    return console.log(['listen', data]);
  });
  socket.on('update', function(data) {
    return console.log(['update', data]);
  });
  return socket.emit('newData', {
    'hey': 'world'
  });
});

app.get('/user', function(req, res) {
  if (req.query.id != null) {
    return User.findOne({
      '_id': req.query.id
    }, function(err, user) {
      if (user != null) {
        return res.json(publiclyViewableUser(user));
      } else {
        return res.json();
      }
    });
  } else if (req.user != null) {
    return res.json(req.user);
  } else {
    return res.json(null);
  }
});

app.get('/hack/allUsers', function(req, res) {
  return User.find({}, function(err, users) {
    return res.json(users);
  });
});

app.get('/hack/allStreams', function(req, res) {
  return Stream.find({}, function(err, streams) {
    return res.json(streams);
  });
});

app.post('/user', function(req, res) {
  console.log(req.body);
  if ((req.query.key != null) && (req.query.id != null) || false) {
    return Client.findOne({
      _id: req.query.key
    }, function(err, client) {
      if (err != null) {
        console.log(err);
      }
      if ((client != null) && client.user_id === req.query.id) {
        return User.findOne({
          _id: client.user_id
        }, function(err, user) {
          if (err != null) {
            console.log(err);
          }
          if (user != null) {
            if (req.body.name != null) {
              user.name = req.body.name;
            }
            if (req.body.email != null) {
              user.email = req.body.email;
            }
            if (req.body.level != null) {
              user.level = req.body.level;
            }
            if (req.body.picture != null) {
              user.picture = req.body.picture;
            }
            if (req.body.bio != null) {
              user.bio = req.body.bio;
            }
            if (req.body.isVerified != null) {
              user.isVerified = req.body.isVerified;
            }
            if (req.body.following != null) {
              user.following = req.body.following;
            }
            if (req.body.favorites != null) {
              user.favorites = req.body.favorites;
            }
            if (req.body.editor != null) {
              user.editor = req.body.editor;
            }
            user.save();
            return res.json(publiclyViewableUser(user));
          } else {
            return res.json('No User');
          }
        });
      } else {
        return res.json([client, "id doesn't match key"]);
      }
    });
  } else {
    return res.json('You are not authenticated');
  }
});

app["delete"]('/user', function(req, res) {});

app.get('/stream', function(req, res) {
  if (req.query.id != null) {
    return Stream.findOne({
      '_id': req.query.id
    }, function(err, stream) {
      if (err != null) {
        console.log(err);
      }
      if (stream != null) {
        return res.json(stream);
      } else {
        return res.json();
      }
    });
  } else {
    return res.json(null);
  }
});

app.post('/stream', function(req, res) {});

app["delete"]('/stream', function(req, res) {});

app.get('/point', function(req, res) {
  if ((req.query.id != null) && (req.query.stream != null)) {
    return Point.findOne({
      '_id': req.query.id,
      'stream': req.query.stream
    }, function(err, stream) {
      if (err != null) {
        console.log(err);
      }
      if (stream != null) {
        return res.json(stream);
      } else {
        return res.json();
      }
    });
  } else {
    return res.json(null);
  }
});

app.post('/point', function(req, res) {});

app["delete"]('/point', function(req, res) {});
